// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  Sold
  Selling
}

model User {
  userId        Int            @id @unique @default(autoincrement())
  username      String         @unique
  email         String         @unique
  password      String
  name          String
  avatar        String
  verified      Boolean        @default(false)
  role          Role           @default(USER)
  product       Product[]
  ProductSaved  ProductSaved[]
  chats         Chat[]
  createdAt     DateTime       @default(now())
  ProductLiked  ProductLiked[]
  refreshTokens RefreshToken[]
  otp           String?
  otpCreatedAt  DateTime?
  otpExpireAt   DateTime?
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [userId])
  token     String   @unique
  createdAt DateTime @default(now())
}

model Chat {
  chatId      Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  users       User[]
  message     Message[]
  lastMessage String?
}

model Message {
  messageId Int      @id @unique @default(autoincrement())
  text      String
  userId    Int
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [chatId])
  createdAt DateTime @default(now())
}

model Product {
  productId    Int            @id @unique @default(autoincrement())
  name         String         @unique
  description  String
  price        Int
  cover        String?
  images       Json
  status       Status         @default(Selling)
  categoryId   Int
  category     Category       @relation(fields: [categoryId], references: [categoryId])
  userId       Int?
  author       User?          @relation(fields: [userId], references: [userId])
  createdAt    DateTime       @default(now())
  soldAt       DateTime?
  pending      Boolean        @default(true)
  ProductSaved ProductSaved[]
  likeNumber   ProductLiked[]
}

model Category {
  categoryId   Int       @id @unique @default(autoincrement())
  categoryName String    @unique
  Product      Product[]
}

model ProductSaved {
  productId Int
  product   Product @relation(fields: [productId], references: [productId])
  userId    Int
  user      User    @relation(fields: [userId], references: [userId])

  @@unique([productId, userId])
}

model ProductLiked {
  productId Int
  product   Product @relation(fields: [productId], references: [productId])
  userId    Int
  user      User    @relation(fields: [userId], references: [userId])

  @@unique([productId, userId])
}
